// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  cashback  String
  createdAt DateTime @default(now())

  UserAddress UserAddress[]
  Order       Order[]
  Cart        Cart[]
  Exchange    Exchange[]
  Book        Book[]
  Payment     Payment[]

  Buyer  ExchangeRequest[] @relation("Buyer")
  Seller ExchangeRequest[] @relation("Seller")

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  cep       String
  street    String
  number    Int
  district  String
  city      String
  uf        String
  createdAt DateTime @default(now())

  UserAddress UserAddress[]
  Order       Order[]

  @@map("adresses")
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  userId    Int
  addressId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  address Address @relation(fields: [addressId], references: [id])

  @@map("userAdresses")
}

model Payment {
  id             Int      @id @default(autoincrement())
  userId         Int
  name           String
  number         String
  cvv            Int
  expirationDate String
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

enum book_state {
  new
  used
}

model Book {
  id                           Int        @id @default(autoincrement())
  title                        String
  author                       String
  publisher                    String
  description                  String
  conservationState            book_state
  conservationStateDescription String
  image                        String
  price                        String
  isbn                         String
  available                    Boolean
  isFromExchange               Boolean
  createdAt                    DateTime   @default(now())
  userId                       Int

  OrderBook OrderBook[]
  Exchange  Exchange[]
  Cart      Cart[]

  user User @relation(fields: [userId], references: [id])

  @@map("books")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  price     String
  addressId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  address Address @relation(fields: [addressId], references: [id])

  OrderBook OrderBook[]

  @@map("orders")
}

model OrderBook {
  id        Int      @id @default(autoincrement())
  orderId   Int
  bookId    Int
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
  book  Book  @relation(fields: [bookId], references: [id])

  ExchangeRequest ExchangeRequest[]

  @@map("orderBooks")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  active    Boolean
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("carts")
}

model Exchange {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("exchanges")
}

model ExchangeRequest {
  id          Int      @id @default(autoincrement())
  buyerId     Int
  sellerId    Int
  orderBookId Int
  createdAt   DateTime @default(now())

  buyer     User      @relation("Buyer", fields: [buyerId], references: [id])
  seller    User      @relation("Seller", fields: [sellerId], references: [id])
  orderBook OrderBook @relation(fields: [orderBookId], references: [id])

  @@map("exchangeRequests")
}
